<launch>
  <arg name="fixed_frame"           default="/odom"/>
  <arg name="base_footprint_frame"  default="/base_footprint"/>
  <arg name="base_stabilized_frame" default="/base_stabilized"/>
  <arg name="base_link_frame"       default="/base_link"/>
  <arg name="ideal_tf"              default="false" />
  <param name="/keyboard_control"   value="false"/>
  <param name="/in_simulator"       value="false"/>
  <rosparam command="load" ns = "/" file="$(find airdrone_launch)/param.yaml"/>

  <!-- Start various sensor drivers -->
  <include file="$(find airdrone_launch)/launch/tf_publisher.launch">
    <arg name="fixed_frame"              value="$(arg fixed_frame)"/>
    <arg name="base_footprint_frame"     value="$(arg base_footprint_frame)"/>
    <arg name="base_stabilized_frame"    value="$(arg base_stabilized_frame)"/>
    <arg name="base_link_frame"          value="$(arg base_link_frame)"/>
  </include>
  <include file="$(find freenect_launch)/launch/freenect.launch">
    <arg name="rgb_processing"                  value="false" />
    <arg name="ir_processing"                   value="false" />
    <arg name="depth_processing"                value="true" />
    <arg name="depth_registered_processing"     value="false" />
    <arg name="disparity_processing"            value="false" />
    <arg name="disparity_registered_processing" value="false" />
    <arg name="camera" value="kinect" />
  </include>
<!--
  <include file="$(find roscopter)/launch/roscopter.launch">
    <arg name="device_name"              value="/dev/APM"/>
    <arg name="input_rc_topic"           value="/apm/rc"/>
    <arg name="output_imu_topic"         value="/sensors/apm/raw_imu"/>
    <arg name="output_type"              value="screen"/>
  </include> 
  <include file="$(find px4flow)/launch/px4flow.launch">
    <arg name="device_name"              value="/dev/PHX"/>
    <arg name="output_flow_topic"        value="/odom"/>
    <arg name="output_sonar_topic"       value="/sensors/sonar_height"/>
    <arg name="output_type"              value="screen"/>
  </include>
-->
  <!-- publish tfs basing on visual odometry -->
  <node pkg="tf_manager" type="tf_manager_nd" name="tf_manager" output="screen">
    <param name="input_pose_topic"           value="/robot_pose_ekf/odom"/>
    <param name="fixed_frame"                value="$(arg fixed_frame)"/>
    <param name="base_footprint_frame"       value="$(arg base_footprint_frame)"/>
    <param name="base_stabilized_frame"      value="$(arg base_stabilized_frame)"/>
    <param name="base_link_frame"            value="$(arg base_link_frame)"/>
    <param name="publish_rate"               value="50"/>
  </node>
  <!-- start visual odometry (the result is being published into '/robot_pose_ekf/odom' topic) -->
  <include file="$(find airdrone_launch)/launch/localization.launch">
    <arg name="input_depth_points_topic"     value="/kinect/depth/points"/>
    <arg name="fixed_frame"                  value="$(arg fixed_frame)"/>
    <arg name="base_footprint_frame"         value="$(arg base_footprint_frame)"/>
    <arg name="base_stabilized_frame"        value="$(arg base_stabilized_frame)"/>
    <arg name="base_link_frame"              value="$(arg base_link_frame)"/>
    <arg name="kinect_depth_optical_frame"   value="/kinect_depth_optical_frame"/>
    <arg name="input_sonar_topic"            value="/sensors/sonar_height"/>
    <arg name="input_imu_topic"              value="/sensors/apm/raw_imu"/>
    <arg name="output_lm_topic"              value="/ransac_slam/lm"/>
    <arg name="flat_cloud_min"               value="-0.30"/>
    <arg name="flat_cloud_max"               value="-0.28"/>
    <arg name="imu_used"                     value="false"/>
    <arg name="odom_used"                    value="false"/>
    <arg name="output_type"                  value="screen"/>
  </include>
  <!-- These nodes compose drone's logic and behaviour 
  <node pkg="vel_cntrl"     name="velocity_server" type="vel_cntrl_nd"     output="log" respawn="true">
    <param name="input_vel_cntrl_topic"      value="/cmd_vel_cntrl"/>
    <param name="input_vel_kbrd_topic"       value="/cmd_vel_keyboard"/>
    <param name="output_vel_topic"           value="/cmd_vel"/>
    <param name="output_rc_topic"            value="/apm/send_rc"/>
    <param name="visualization_topic"        value="/velocity_server/markers"/>
    <param name="fixed_frame"                value="$(arg fixed_frame)"/>
    <param name="input_velocity_frame"       value="/kinect_link"/>
    <param name="output_velocity_frame"      value="$(arg base_link_frame)"/>
  </node>
  <node pkg="action_server" name="action_server"       type="action_server_nd" output="log" respawn="true">
    <param name="fixed_frame"                value="$(arg fixed_frame)"/>
    <param name="base_footprint_frame"       value="$(arg base_footprint_frame)"/>
    <param name="base_stabilized_frame"      value="$(arg base_stabilized_frame)"/>
    <param name="pointcloud_frame"           value="/kinect_link"/>
    <param name="input_lm_topic"             value="/ransac_slam/lm"/>
    <param name="output_vel_topic"           value="/cmd_vel_cntrl"/>
  </node>
  <node pkg="action_client" name="action_client"       type="main.py"          output="log" respawn="true"/>-->
  <!-- Logging node (.bag) 
  <node pkg="rosbag" type="record" name="rosbag" output="log" args="-a -q -O rosbag_record_out.bag" />
-->
</launch>
