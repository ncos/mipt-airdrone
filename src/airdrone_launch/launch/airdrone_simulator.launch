<launch>
  <arg name="input_depth_image_raw_topic"   default="/sensors/kinect/depth/image_raw"/>
  <arg name="input_depth_camera_info_topic" default="/sensors/kinect/depth/camera_info"/>
  <arg name="input_rgb_image_raw_topic"     default="/sensors/kinect/rgb/image_raw"/>
  <arg name="input_rgb_camera_info_topic"   default="/sensors/kinect/rgb/camera_info"/>

  <!-- Start kinect depth frame converter to convert depth image from int millimetres to double metres -->
  <node pkg="nodelet" type="nodelet" name="nodelet_manager" args="manager" output="screen"/>
  <node pkg="nodelet" type="nodelet" name="debayer" args="load image_proc/debayer nodelet_manager">    
    <remap from="image_raw"        to="$(arg input_rgb_image_raw_topic)"/>
    <remap from="camera_info"      to="$(arg input_rgb_camera_info_topic)"/>
    <remap from="image_mono"       to="/debayer/kinect/rgb/image_mono"/>
    <remap from="image_rect"       to="/debayer/kinect/rgb/image_rect"/>
    <remap from="image_color"      to="/debayer/kinect/rgb/image_color"/>
    <remap from="image_rect_color" to="/debayer/kinect/rgb/image_rect_color"/>
  </node>
  <node pkg="nodelet" type="nodelet" name="rgbd_image_proc" args="load ccny_rgbd/RGBDImageProcNodelet nodelet_manager" output="log">
    <remap from="/camera/rgb/image_color"   to="/debayer/kinect/rgb/image_color"/>
    <remap from="/camera/depth/image_raw"   to="$(arg input_depth_image_raw_topic)"/>
    <remap from="/camera/rgb/camera_info"   to="$(arg input_rgb_camera_info_topic)"/>
    <remap from="/camera/depth/camera_info" to="$(arg input_depth_camera_info_topic)"/>
    <remap from="/rgbd/rgb"                 to="/rgbd_calibrated/rgb"/>
    <remap from="/rgbd/depth"               to="/rgbd_calibrated/depth"/>
    <remap from="/rgbd/info"                to="/rgbd_calibrated/info"/>
    <remap from="/rgbd/cloud"               to="/rgbd_calibrated/cloud"/>
    <param name="scale"         value="1.0"/>
    <param name="unwarp"        value="false"/>
    <param name="publish_cloud" value="false"/>
    <param name="calib_path"    value="$(find ccny_rgbd_data)/calibration_openni_default"/>
    <param name="verbose"       value="false"/>
  </node>

  <!-- Visual odometry
  <include file="$(find localization_launch)/launch/localization.launch"></include>  -->

  <!-- Copter service nodes -->
  <node pkg="rgbd_shrinker"  name="rgbd_shrinker"       type="rgbd_shrinker_nd"  output="screen" required="true"></node>
  <node pkg="altitude_cntrl" name="altitude_controller" type="altitude_cntrl_nd" output="screen" required="true">
    <rosparam file="$(find airdrone_launch)/param.yaml" command="load" ns = "/" />
  </node>
	
  <node pkg="vel_cntrl"      name="velocity_controller" type="vel_cntrl_nd"      output="screen" required="true">
    <rosparam file="$(find airdrone_launch)/param.yaml" command="load" ns = "/" />
  </node>

  <node pkg="action_server"  name="action_server"       type="action_server_nd"  output="screen">
    <rosparam file="$(find airdrone_launch)/param.yaml" command="load" ns = "/" />
  </node>
  <node pkg="action_client"  name="action_client"       type="main.py"           output="screen"></node>
	
  <!--
  <node pkg="smach_viewer"  name="smach_viewer"       type="smach_viewer.py"></node>
  -->
</launch>
