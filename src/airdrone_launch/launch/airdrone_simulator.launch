<launch>
  <arg name="input_depth_image_raw_topic"   default="/sensors/kinect/depth/image_raw"/>
  <arg name="input_depth_camera_info_topic" default="/sensors/kinect/depth/camera_info"/>
  <arg name="input_rgb_image_raw_topic"     default="/sensors/kinect/rgb/image_raw"/>
  <arg name="input_rgb_camera_info_topic"   default="/sensors/kinect/rgb/camera_info"/>

  <!-- Start kinect depth frame converter to convert depth image from int millimetres to double metres -->
  <node pkg="nodelet" type="nodelet" name="nodelet_manager" args="manager" output="screen"/>
  <node pkg="nodelet" type="nodelet" name="debayer" args="load image_proc/debayer nodelet_manager">    
    <remap from="image_raw"        to="$(arg input_rgb_image_raw_topic)"/>
    <remap from="camera_info"      to="$(arg input_rgb_camera_info_topic)"/>
    <remap from="image_mono"       to="/debayer/kinect/rgb/image_mono"/>
    <remap from="image_rect"       to="/debayer/kinect/rgb/image_rect"/>
    <remap from="image_color"      to="/debayer/kinect/rgb/image_color"/>
    <remap from="image_rect_color" to="/debayer/kinect/rgb/image_rect_color"/>
  </node>

  <!-- Start laserscan generator to convert depth image to laserscan -->
  <node pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" name="depthimage_to_laserscan" respawn="true"> 
    <param name="output_frame_id" value="/kinect_depth_frame"/>
    <param name="scan_height"     value="200"/> 
    <param name="scan_time"       value="0.033"/>
    <param name="range_min"       value="0.45"/>
    <param name="range_max"       value="10.0"/>
    <remap from="/image"       to="$(arg input_depth_image_raw_topic)"/>
    <remap from="/camera_info" to="$(arg input_depth_camera_info_topic)"/>
    <remap from="/scan"        to="/sensors/kinect/scan"/>
  </node>

  <!-- Visual odometry (Hector-slam) -->
  <node pkg="tf" type="static_transform_publisher" name="odom2base_footprint" args="0 0 0 0 0 0 nav base_link 30" />
  <include file="$(find slam_hec)/launch/slam.launch">
    <arg name="input_laserscan_topic" value="/sensors/kinect/scan"/>
    <arg name="input_base_frame_name" value="base_link"/>
    <arg name="input_odom_frame_name" value="nav"/>
  </include>  

  <!-- Visual odometry (CCNY-RGBD) -->
  <!--
  <include file="$(find localization_launch)/launch/localization.launch">
    <arg name="input_depth_topic" value="$(arg input_depth_image_raw_topic)"/>
    <arg name="input_rgb_topic"   value="/debayer/kinect/rgb/image_color"/>
    <arg name="input_info_topic"  value="$(arg input_rgb_camera_info_topic)"/>
  </include>  
  -->

  <!-- Copter service nodes -->
  <node pkg="rgbd_shrinker"  name="rgbd_shrinker"       type="rgbd_shrinker_nd"  output="screen" required="true"></node>
  <node pkg="altitude_cntrl" name="altitude_controller" type="altitude_cntrl_nd" output="screen" required="true">
    <rosparam file="$(find airdrone_launch)/param.yaml" command="load" ns = "/" />
  </node>
	
  <node pkg="vel_cntrl"      name="velocity_controller" type="vel_cntrl_nd"      output="screen" required="true">
    <rosparam file="$(find airdrone_launch)/param.yaml" command="load" ns = "/" />
  </node>

  <node pkg="action_server"  name="action_server"       type="action_server_nd"  output="screen">
    <rosparam file="$(find airdrone_launch)/param.yaml" command="load" ns = "/" />
  </node>
  <node pkg="action_client"  name="action_client"       type="main.py"           output="screen"></node>
	
  <!--
  <node pkg="smach_viewer"  name="smach_viewer"       type="smach_viewer.py"></node>
  -->
</launch>
